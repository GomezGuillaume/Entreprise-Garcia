<?php

class CodeBarre {

    private $code;
    private $color;
    private $width;
    private $elements = [
        "A" => [
            "___XX_X",
            "__XX__X",
            "__X__XX",
            "_XXXX_X",
            "_X___XX",
            "_XX___X",
            "_X_XXXX",
            "_XXX_XX",
            "_XX_XXX",
            "___X_XX"
        ],
        "B" => [
            "_X__XXX",
            "_XX__XX",
            "__XX_XX",
            "_X____X",
            "__XXX_X",
            "_XXX__X",
            "____X_X",
            "___X__X",
            "___X__X",
            "__X_XXX",
        ],
        "C" => [
            "XXX__X_",
            "XX__XX_",
            "XX_XX__",
            "X____X_",
            "X_XXX__",
            "X__XXX_",
            "X_X____",
            "X___X__",
            "X__X___",
            "XXX_X__"
        ]
    ];

    private $motifs = [
        ["A", "A", "A", "A", "A", "A"],
        ["A", "A", "B", "A", "B", "B"],
        ["A", "A", "B", "B", "A", "B"],
        ["A", "A", "B", "B", "B", "A"],
        ["A", "B", "A", "A", "B", "B"],
        ["A", "B", "B", "A", "A", "B"],
        ["A", "B", "B", "B", "A", "A"],
        ["A", "B", "A", "B", "A", "B"],
        ["A", "B", "A", "B", "B", "A"],
        ["A", "B", "B", "A", "B", "A"]
    ];

    private $garde_normale = "X_X";
    private $garde_centrale = "_X_X_";

    public function __construct(int $code, int $size = 200, string $color = "#000000") {
        $this->code = $code;
        $this->width = $size;
        $this->color = $color;
    }

    public function getCode() {
        return $this->code;
    }

    public function setCode(int $code) {
        $this->code = $code;
    }

    public function getColor() {
        return $this->color;
    }

    public function setColor(string $color) {
        $this->color = $color;
    }

    public function getWidth() {
        return $this->width;
    }

    public function setWidth(int $width) {
        $this->width = $width;
    }

    private function genereChaineEAN8() {
        $arr_code = str_split($this->code);
        $chaine = "";

        $chaine .= $this->garde_normale;

        for ($i = 0 ; $i <= 3 ; $i++) {
            $chaine .= $this->elements['A'][$arr_code[$i]];
        }

        $chaine .= $this->garde_centrale;

        for ($i = 4 ; $i <= 7 ; $i++) {
            $chaine .= $this->elements['C'][$arr_code[$i]];
        }

        $chaine .= $this->garde_normale;

        return $chaine;
    }

    private function genereChaineEAN13() {
        $arr_code = str_split($this->code);
        $motif = $this->motifs[$arr_code[0]];

        $chaine = "";
        $chaine .= $this->garde_normale;

        for ($i = 1 ; $i <= 6 ; $i++) {
            $chaine .= $this->elements[$motif[$i-1]][$arr_code[$i]];
        }

        $chaine .= $this->garde_centrale;

        for ($i = 7 ; $i <= 12 ; $i++) {
            $chaine .= $this->elements['C'][$arr_code[$i]];
        }

        $chaine .= $this->garde_normale;

        return $chaine;
    }

    private function genereChaine() {
        $arr_code = str_split($this->code);
        if (count($arr_code) == 8) {
            return $this->genereChaineEAN8();
        } elseif (count($arr_code) == 13) {
            return $this->genereChaineEAN13();
        } else {
            die('Le code doit être à 8 ou 13 chiffres');
        }
    }

    public function affiche() {

        $arr_chaine = str_split($this->genereChaine());

        echo '<div style="display: flex; width: '.$this->width.'px;">';

        foreach($arr_chaine as $element) {
            if ($element == "X") {
                echo '<div style="flex: 1; height: 60px; background-color: '.$this->color.'"></div>';
            } else {
                echo '<div style="flex: 1; height: 60px; background-color: white"></div>';
            }
        }

        echo '</div>';
    }
}
